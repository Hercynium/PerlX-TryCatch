
=head1 NAME

PerlX::Syntax::TryCatch - Try::Tiny where return works as it ought to.

(name still pending)

=head1 SYNOPSIS

  use PerlX::Syntax::TryCatch; # exports try/catch/finally by default

  sub revsort_file {
    my ($file_name) = @_;

    my $fh
    try {
      open my $fh, '<', $file_name or die "Couldn't open $file_name: $!";
      my @sorted = sort <$fh>;
      return unless @sorted;
    }
    catch {
      return if /No such file/i;      # no big deal, nothing to sort.
      die $_ if /Permission denied/i; # could be a problem, rethrow
    }
    finally {
      # return *not* supported here.
      close $fh if $fh;
    }

    return reverse @sorted;
  }

  my @r1 = revsort_file $0;                   # this file, sorted and reversed
  my @r2 = revsort_file '/non/existent.file'; # empty list (no need to reverse)
  my @r3 = revsort_file '/dev/autofs';        # should throw exception on mac
                                              # and linux unless you're root.

=head1 STATUS

B<Not even alpha> - it is *not* yet feature complete, but the basic
mechanism is now working 100%. Try blocks work as intended, but catch
and finally block support is not-yet-existent.

=head1 DESCRIPTION

This is my attempt at fixing the one major issue I have with L<Try::Tiny>:
The fact that, despite *looking* like an actual language extension, it does
not entirely I<behave> like one.

Now, don't get me wrong. I <3 L<Try::Tiny> a whole lot and use it all over the
place. I've also read every line of that code and understand fully why it is
the way it is. And it does everything it says on the tin quickly and reliably
with 100% pure-perl, uses no compiled/XS extensions, nothing but core modules
and works on versions of perl back to 5.6!

That is truly good stuff, and I don't want it to change, one bit.

However, I hurt (just a little) inside whever I have to explain to somebody
that using C<return> in a L<Try::Tiny> block does I<not> leave the sub
containing the try block! Furthermore, it also annoys the non-perl hackers who
I try to turn on to perl (and some are coming to like it!) when something they
see as so basic simply doesn't DWIM. Some even understand *why* it works the
way it does, but it's just "Yet Another Nasty Perl Inconsistency".

This module aims to do two things:

=over 4

=item *
Make the use of C<return> in a try-block DWIM

=item *
Eliminate the need for the terminating semicolon at the end of the
try/catch/finally construct

=back

That's it, at least for now. Perhaps more can be glued on. However, If I
wanted all the functionality of L<TryCatch>, (which, BTW, is another amazing
module and does what this one does plus a whole lot more) I'd just use that
instead. I usually don't though, because its dependencies are quite numerous
and somewhat heavy for my liking. It also uses much deeper magick than this
module, which may or may not be a good thing.

This module should need the use of nothing outside of core-perl *except* for
L<Devel::Declare> and L<Try::Tiny>. L<Devel::Declare> does pull in a few deps,
and it uses XS (and therefore requires a compiler) but it's a stable, mature
module that is now widely used and compatible with perls back to 5.8.1.

=head1 LICENSE

I'll put a proper license declaration here when I get dzil running on my new
box, but this software is being released under the same terms as Perl itself
and shall remain so.

=head1 AUTHOR

=over 4

=item Stephen R. Scaffidi <sscaffidi@cpan.org>

=back
